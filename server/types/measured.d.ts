/** Declaration file generated by dts-gen */

declare module 'measured' {

	export class BinaryHeap {
		constructor(options: any)

		add(...args: any[]): void

		clone(): any

		first(): any

		removeFirst(): any

		size(): any

		toArray(): any

		toSortedArray(): any

	}

	export class Collection {
		constructor(name: any)

		counter(name: any, properties: any): any

		end(): void

		gauge(name: any, properties: any): any

		histogram(name: any, properties: any): any

		meter(name: any, properties: any): any

		register(name: any, metric: any): void

		timer(name: any, properties: any): any

		toJSON(): any

	}

	export class Counter {
		constructor(properties?: any)

		dec(n?: any): void

		inc(n?: any): void

		reset(count?: any): void

		toJSON(): any

	}

	export class ExponentiallyDecayingSample {
		constructor(options: any)

		toArray(): any

		toSortedArray(): any

		update(value: any, timestamp: any): void

		static ALPHA: number

		static RESCALE_INTERVAL: number

		static SIZE: number

	}

	export class ExponentiallyMovingWeightedAverage {
		constructor(timePeriod: any, tickInterval: any)

		rate(timeUnit: any): any

		tick(): void

		update(n: any): void

		static TICK_INTERVAL: number

	}

	export class Gauge {
		constructor(readFn: () => number)

		toJSON(): number

		_readFn(): number

	}

	export class Histogram {
		constructor(properties?: any)

		hasValues(): any

		percentiles(percentiles: any): any

		reset(): void

		toJSON(): any

		update(value: any): void

	}

	export class Meter {
		constructor(properties?: any)

		currentRate(): any

		end(): void

		mark(n?: any): void

		meanRate(): any

		ref(): void

		reset(): void

		start(): void

		toJSON(): any

		unref(): void

		static RATE_UNIT: number

		static TICK_INTERVAL: number

	}

	export class Stopwatch {
		constructor(options: any)

		end(): any

	}

	export class Timer {
		constructor(properties?: any)

		end(): void

		ref(): void

		reset(): void

		start(): { end: () => void }

		toJSON(): any

		unref(): void

		update(value: any): void

	}

	export const units: {
		DAYS: number
		HOURS: number
		MICROSECONDS: number
		MILLISECONDS: number
		MINUTES: number
		NANOSECONDS: number
		SECONDS: number
	}

	export function createCollection(name: any): any

	export namespace BinaryHeap {
		namespace prototype {
			function add(...args: any[]): void

			function clone(): any

			function first(): any

			function removeFirst(): any

			function size(): any

			function toArray(): any

			function toSortedArray(): any
		}

	}

	export namespace Collection {
		namespace prototype {
			function counter(name: any, properties: any): any

			function end(): void

			function gauge(name: any, properties: any): any

			function histogram(name: any, properties: any): any

			function meter(name: any, properties: any): any

			function register(name: any, metric: any): void

			function timer(name: any, properties: any): any

			function toJSON(): any
		}

	}

	export namespace Counter {
		namespace prototype {
			function dec(n: any, ...args: any[]): void

			function inc(n: any, ...args: any[]): void

			function reset(count: any): void

			function toJSON(): any
		}

	}

	export namespace ExponentiallyDecayingSample {
		namespace prototype {
			function toArray(): any

			function toSortedArray(): any

			function update(value: any, timestamp: any): void
		}

	}

	export namespace ExponentiallyMovingWeightedAverage {
		namespace prototype {
			function rate(timeUnit: any): any

			function tick(): void

			function update(n: any): void
		}

	}

	export namespace Gauge {
		namespace prototype {
			function toJSON(): any
		}

	}

	export namespace Histogram {
		namespace prototype {
			function hasValues(): any

			function percentiles(percentiles: any): any

			function reset(): void

			function toJSON(): any

			function update(value: any): void
		}

	}

	export namespace Meter {
		namespace prototype {
			function currentRate(): any

			function end(): void

			function mark(n: any): void

			function meanRate(): any

			function ref(): void

			function reset(): void

			function start(): void

			function toJSON(): any

			function unref(): void
		}

	}

	export namespace Stopwatch {
		namespace prototype {
			const domain: any

			function addListener(type: any, listener: any): any

			function emit(type: any, ...args: any[]): any

			function end(): any

			function eventNames(): any

			function getMaxListeners(): any

			function listenerCount(type: any): any

			function listeners(type: any): any

			function on(type: any, listener: any): any

			function once(type: any, listener: any): any

			function prependListener(type: any, listener: any): any

			function prependOnceListener(type: any, listener: any): any

			function removeAllListeners(type: any, ...args: any[]): any

			function removeListener(type: any, listener: any): any

			function setMaxListeners(n: any): any
		}

	}

	export namespace Timer {
		namespace prototype {
			function end(): void

			function ref(): void

			function reset(): void

			function start(): any

			function toJSON(): any

			function unref(): void

			function update(value: any): void
		}

	}

}

