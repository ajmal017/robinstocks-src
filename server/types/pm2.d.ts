/** Declaration file generated by dts-gen */

declare module 'pm2' {

	export class custom {
		constructor(opts?: any)

		actionFromJson(action?: any, file?: any, opts?: any, jsonVia?: any, cb?: any): any

		attach(pm_id?: any, separator?: any, cb?: any): any

		backward(process_name?: any, cb?: any): any

		close(cb?: any): any

		conf(key?: any, value?: any, cb?: any): any

		connect(noDaemon?: any, cb?: any): any

		dashboard(cb?: any): any

		deepUpdate(cb?: any): void

		delete(process_name?: any, jsonVia?: any, cb?: any): any

		deleteModule(module_name?: any, cb?: any): any

		deploy(file?: any, commands?: any, cb?: any): any

		describe(pm2_id?: any, cb?: any): any

		destroy(cb?: any): any

		disconnect(cb?: any): any

		dockerMode(script?: any, opts?: any, mode?: any): any

		dump(cb?: any): any

		exitCli(code?: any): any

		flush(cb?: any): any

		forward(process_name?: any, cb?: any): any

		generateDockerfile(script?: any, opts?: any): any

		generateModuleSample(app_name?: any, cb?: any): any

		generateSample(mode?: any): any

		get(key?: any, cb?: any): any

		getProcessIdByName(name?: any, cb?: any): any

		getVersion(cb?: any, ...args?: any[]): any

		gracefulReload(process_name?: any, opts?: any, cb?: any): void

		install(module_name?: any, opts?: any, cb?: any): any

		interact(secret_key?: any, public_key?: any, machine_name?: any, cb?: any): any

		interactInfos(cb?: any): any

		jlist(debug?: any): void

		kill(cb?: any): any

		killAllModules(cb?: any): any

		killDaemon(cb?: any): any

		killInteract(cb?: any): any

		launchBus(cb?: any): void

		launchModules(cb?: any): void

		link(secret_key?: any, public_key?: any, machine_name?: any, cb?: any): any

		list(opts?: any, cb?: any): any

		loginToKM(): any

		logrotate(opts?: any, cb?: any): any

		monit(cb?: any): any

		monitorState(state?: any, target?: any, cb?: any): any

		msgProcess(opts?: any, cb?: any): void

		multiset(serial?: any, cb?: any): any

		openDashboard(): any

		ping(cb?: any): any

		printLogs(id?: any, lines?: any, raw?: any, timestamp?: any, exclusive?: any): any

		profilePM2(command?: any, cb?: any, ...args?: any[]): any

		publish(module_name?: any, cb?: any): any

		pullAndGracefulReload(process_name?: any, cb?: any): void

		pullAndReload(process_name?: any, cb?: any): void

		pullAndRestart(process_name?: any, cb?: any): void

		pullCommitId(process_name?: any, commit_id?: any, cb?: any): any

		registerToKM(): any

		reload(process_name?: any, opts?: any, cb?: any): any

		reloadLogs(cb?: any): any

		remote(command?: any, opts?: any, cb?: any): any

		remoteV2(command?: any, opts?: any, cb?: any): any

		report(): void

		reset(process_name?: any, cb?: any): any

		restart(cmd?: any, opts?: any, cb?: any): void

		resurrect(cb?: any): any

		scale(app_name?: any, number?: any, cb?: any): any

		sendDataToProcessId(proc_id?: any, packet?: any, cb?: any): any

		sendLineToStdin(pm_id?: any, line?: any, separator?: any, cb?: any): any

		sendSignalToProcessId(signal?: any, process_id?: any, cb?: any): any

		sendSignalToProcessName(signal?: any, process_name?: any, cb?: any): any

		serve(target_path?: any, port?: any, opts?: any, cb?: any): any

		set(key?: any, value?: any, cb?: any): any

		snapshotPM2(cb?: any, ...args?: any[]): any

		speedList(code?: any): any

		start(cmd?: any, opts?: any, cb?: any): void

		startup(platform?: any, opts?: any, cb?: any): any

		stop(process_name?: any, cb?: any): void

		streamLogs(id?: any, lines?: any, raw?: any, timestamp?: any, exclusive?: any): any

		trigger(pm_id?: any, action_name?: any, params?: any, cb?: any): any

		uninstall(module_name?: any, cb?: any): any

		uninstallStartup(platform?: any, opts?: any, cb?: any): any

		unlink(cb?: any): void

		unset(key?: any, cb?: any): any

		update(cb?: any, ...args?: any[]): any

		web(port?: any, cb?: any): any

	}

	export const cwd: string

	export const daemon_mode: boolean

	export const gl_interact_infos: any

	export const gl_is_km_linked: boolean

	export const machine_name: any

	export const pm2_home: string

	export const public_key: any

	export const secret_key: any

	export function actionFromJson(action?: any, file?: any, opts?: any, jsonVia?: any, cb?: any): any

	export function attach(pm_id?: any, separator?: any, cb?: any): any

	export function backward(process_name?: any, cb?: any): any

	export function close(cb?: any): any

	export function conf(key?: any, value?: any, cb?: any): any

	export function connect(noDaemon?: any, cb?: any): any

	export function dashboard(cb?: any): any

	export function deepUpdate(cb?: any): void

	export function deleteModule(module_name?: any, cb?: any): any

	export function deploy(file?: any, commands?: any, cb?: any): any

	export function describe(pm2_id?: any, cb?: any): any

	export function destroy(cb?: any): any

	export function disconnect(cb?: any): any

	export function dockerMode(script?: any, opts?: any, mode?: any): any

	export function dump(cb?: any): any

	export function exitCli(code?: any): any

	export function flush(cb?: any): any

	export function forward(process_name?: any, cb?: any): any

	export function generateDockerfile(script?: any, opts?: any): any

	export function generateModuleSample(app_name?: any, cb?: any): any

	export function generateSample(mode?: any): any

	export function get(key?: any, cb?: any): any

	export function getProcessIdByName(name?: any, cb?: any): any

	export function getVersion(cb?: any, ...args?: any[]): any

	export function gracefulReload(process_name?: any, opts?: any, cb?: any): void

	export function install(module_name?: any, opts?: any, cb?: any): any

	export function interact(secret_key?: any, public_key?: any, machine_name?: any, cb?: any): any

	export function interactInfos(cb?: any): any

	export function jlist(debug?: any): void

	export function kill(cb?: any): any

	export function killAllModules(cb?: any): any

	export function killDaemon(cb?: any): any

	export function killInteract(cb?: any): any

	export function launchBus(cb?: any): void

	export function launchModules(cb?: any): void

	export function link(secret_key?: any, public_key?: any, machine_name?: any, cb?: any): any

	export function list(opts?: any, cb?: any): any

	export function loginToKM(): any

	export function logrotate(opts?: any, cb?: any): any

	export function monit(cb?: any): any

	export function monitorState(state?: any, target?: any, cb?: any): any

	export function msgProcess(opts?: any, cb?: any): void

	export function multiset(serial?: any, cb?: any): any

	export function openDashboard(): any

	export function ping(cb?: any): any

	export function printLogs(id?: any, lines?: any, raw?: any, timestamp?: any, exclusive?: any): any

	export function profilePM2(command?: any, cb?: any, ...args?: any[]): any

	export function publish(module_name?: any, cb?: any): any

	export function pullAndGracefulReload(process_name?: any, cb?: any): void

	export function pullAndReload(process_name?: any, cb?: any): void

	export function pullAndRestart(process_name?: any, cb?: any): void

	export function pullCommitId(process_name?: any, commit_id?: any, cb?: any): any

	export function registerToKM(): any

	export function reload(process_name?: any, opts?: any, cb?: any): any

	export function reloadLogs(cb?: any): any

	export function remote(command?: any, opts?: any, cb?: any): any

	export function remoteV2(command?: any, opts?: any, cb?: any): any

	export function report(): void

	export function reset(process_name?: any, cb?: any): any

	export function restart(cmd?: any, opts?: any, cb?: any): void

	export function resurrect(cb?: any): any

	export function scale(app_name?: any, number?: any, cb?: any): any

	export function sendDataToProcessId(proc_id?: any, packet?: any, cb?: any): any

	export function sendLineToStdin(pm_id?: any, line?: any, separator?: any, cb?: any): any

	export function sendSignalToProcessId(signal?: any, process_id?: any, cb?: any): any

	export function sendSignalToProcessName(signal?: any, process_name?: any, cb?: any): any

	export function serve(target_path?: any, port?: any, opts?: any, cb?: any): any

	export function set(key?: any, value?: any, cb?: any): any

	export function snapshotPM2(cb?: any, ...args?: any[]): any

	export function speedList(code?: any): any

	export function start(cmd?: any, opts?: any, cb?: any): void

	export function startup(platform?: any, opts?: any, cb?: any): any

	export function stop(process_name?: any, cb?: any): void

	export function streamLogs(id?: any, lines?: any, raw?: any, timestamp?: any, exclusive?: any): any

	export function trigger(pm_id?: any, action_name?: any, params?: any, cb?: any): any

	export function uninstall(module_name?: any, cb?: any): any

	export function uninstallStartup(platform?: any, opts?: any, cb?: any): any

	export function unlink(cb?: any): void

	export function unset(key?: any, cb?: any): any

	export function update(cb?: any, ...args?: any[]): any

	export function web(port?: any, cb?: any): any

	export namespace Client {
		const conf: {
			AGGREGATION_DURATION: number
			APP_CONF_TPL: string
			APP_CONF_TPL_SIMPLE: string
			CLUSTER_MODE_ID: string
			CODE_UNCAUGHTEXCEPTION: number
			CONCURRENT_ACTIONS: number
			CONTEXT_ON_ERROR: number
			DAEMON_PUB_PORT: string
			DAEMON_RPC_PORT: string
			DEBUG: boolean
			DEFAULT_LOG_PATH: string
			DEFAULT_MODULE_JSON: string
			DEFAULT_MODULE_PATH: string
			DEFAULT_PID_PATH: string
			DOCKERFILE_JAVA: string
			DOCKERFILE_NODEJS: string
			DOCKERFILE_RUBY: string
			DUMP_FILE_PATH: string
			ERRORED_STATUS: string
			ERROR_EXIT: number
			FORK_MODE_ID: string
			GRACEFUL_LISTEN_TIMEOUT: number
			GRACEFUL_TIMEOUT: number
			INTERACTION_CONF: string
			INTERACTOR_LOG_FILE_PATH: string
			INTERACTOR_PID_PATH: string
			INTERACTOR_RPC_PORT: string
			IS_WINDOWS: boolean
			KEYMETRICS_BANNER: string
			KEYMETRICS_ROOT_URL: string
			KILL_TIMEOUT: number
			KM_ACCESS_TOKEN: string
			LAUNCHING_STATUS: string
			LOGROTATE_SCRIPT: string
			LOGS_BUFFER_SIZE: number
			LOW_MEMORY_ENVIRONMENT: boolean
			MODIFY_REQUIRE: boolean
			ONE_LAUNCH_STATUS: string
			ONLINE_STATUS: string
			PM2_CONF_FILE: string
			PM2_HOME: string
			PM2_LOG_DATE_FORMAT: string
			PM2_LOG_FILE_PATH: string
			PM2_MODULE_CONF_FILE: string
			PM2_PID_FILE_PATH: string
			PM2_PROGRAMMATIC: string
			PM2_RELOAD_LOCKFILE: string
			PM2_ROOT_PATH: string
			PREFIX_MSG: string
			PREFIX_MSG_ERR: string
			PREFIX_MSG_MOD: string
			PREFIX_MSG_MOD_ERR: string
			PREFIX_MSG_SUCCESS: string
			PREFIX_MSG_WARNING: string
			RELOAD_LOCK_TIMEOUT: number
			REMOTE_HOST: string
			REMOTE_PORT: number
			REMOTE_PORT_TCP: number
			SAMPLE_CONF_FILE: string
			SEND_INTERVAL: number
			STOPPED_STATUS: string
			STOPPING_STATUS: string
			SUCCESS_EXIT: number
			TEMPLATE_FOLDER: string
			TRACE_FLUSH_INTERVAL: number
			WEB_IPADDR: string
			WEB_PORT: number
			WEB_STRIP_ENV_VARS: boolean
			WORKER_INTERVAL: number
		}

		const daemon_mode: boolean

		const machine_name: any

		const pm2_home: string

		const pub_socket_file: string

		const public_key: any

		const rpc_socket_file: string

		const secret_key: any

		function close(cb?: any): void

		function disconnectBus(cb?: any): any

		function disconnectRPC(cb?: any): any

		function executeRemote(method?: any, app_conf?: any, fn?: any): any

		function getAllModulesId(cb?: any): any

		function getAllProcess(cb?: any): any

		function getAllProcessId(cb?: any): any

		function getExposedMethods(cb?: any): void

		function getProcessByName(name?: any, cb?: any): any

		function getProcessIdByName(name?: any, force_all?: any, cb?: any): any

		function initFileStructure(opts?: any): void

		function killDaemon(fn?: any): any

		function launchBus(cb?: any): any

		function launchDaemon(opts?: any, cb?: any): any

		function launchRPC(cb?: any): any

		function notifyGod(action_name?: any, id?: any, cb?: any): any

		function pingDaemon(cb?: any): any

		function start(cb?: any): any

		function startWatch(method?: any, env?: any, fn?: any): any

		function stopWatch(method?: any, env?: any, fn?: any): any

		function toggleWatch(method?: any, env?: any, fn?: any): any

		namespace close { }

		namespace disconnectBus { }

		namespace disconnectRPC { }

		namespace executeRemote { }

		namespace getAllModulesId { }

		namespace getAllProcess { }

		namespace getAllProcessId { }

		namespace getExposedMethods { }

		namespace getProcessByName { }

		namespace getProcessIdByName { }

		namespace initFileStructure { }

		namespace killDaemon { }

		namespace launchBus { }

		namespace launchDaemon { }

		namespace launchRPC { }

		namespace notifyGod { }

		namespace pingDaemon { }

		namespace start { }

		namespace startWatch { }

		namespace stopWatch { }

		namespace toggleWatch { }

	}

	export namespace actionFromJson { }

	export namespace attach { }

	export namespace backward { }

	export namespace close { }

	export namespace conf { }

	export namespace connect { }

	export namespace custom {
		namespace prototype {
			function actionFromJson(action?: any, file?: any, opts?: any, jsonVia?: any, cb?: any): any

			function attach(pm_id?: any, separator?: any, cb?: any): any

			function backward(process_name?: any, cb?: any): any

			function close(cb?: any): any

			function conf(key?: any, value?: any, cb?: any): any

			function connect(noDaemon?: any, cb?: any): any

			function dashboard(cb?: any): any

			function deepUpdate(cb?: any): void

			function deleteModule(module_name?: any, cb?: any): any

			function deploy(file?: any, commands?: any, cb?: any): any

			function describe(pm2_id?: any, cb?: any): any

			function destroy(cb?: any): any

			function disconnect(cb?: any): any

			function dockerMode(script?: any, opts?: any, mode?: any): any

			function dump(cb?: any): any

			function exitCli(code?: any): any

			function flush(cb?: any): any

			function forward(process_name?: any, cb?: any): any

			function generateDockerfile(script?: any, opts?: any): any

			function generateModuleSample(app_name?: any, cb?: any): any

			function generateSample(mode?: any): any

			function get(key?: any, cb?: any): any

			function getProcessIdByName(name?: any, cb?: any): any

			function getVersion(cb?: any, ...args?: any[]): any

			function gracefulReload(process_name?: any, opts?: any, cb?: any): void

			function install(module_name?: any, opts?: any, cb?: any): any

			function interact(secret_key?: any, public_key?: any, machine_name?: any, cb?: any): any

			function interactInfos(cb?: any): any

			function jlist(debug?: any): void

			function kill(cb?: any): any

			function killAllModules(cb?: any): any

			function killDaemon(cb?: any): any

			function killInteract(cb?: any): any

			function launchBus(cb?: any): void

			function launchModules(cb?: any): void

			function link(secret_key?: any, public_key?: any, machine_name?: any, cb?: any): any

			function list(opts?: any, cb?: any): any

			function loginToKM(): any

			function logrotate(opts?: any, cb?: any): any

			function monit(cb?: any): any

			function monitorState(state?: any, target?: any, cb?: any): any

			function msgProcess(opts?: any, cb?: any): void

			function multiset(serial?: any, cb?: any): any

			function openDashboard(): any

			function ping(cb?: any): any

			function printLogs(id?: any, lines?: any, raw?: any, timestamp?: any, exclusive?: any): any

			function profilePM2(command?: any, cb?: any, ...args?: any[]): any

			function publish(module_name?: any, cb?: any): any

			function pullAndGracefulReload(process_name?: any, cb?: any): void

			function pullAndReload(process_name?: any, cb?: any): void

			function pullAndRestart(process_name?: any, cb?: any): void

			function pullCommitId(process_name?: any, commit_id?: any, cb?: any): any

			function registerToKM(): any

			function reload(process_name?: any, opts?: any, cb?: any): any

			function reloadLogs(cb?: any): any

			function remote(command?: any, opts?: any, cb?: any): any

			function remoteV2(command?: any, opts?: any, cb?: any): any

			function report(): void

			function reset(process_name?: any, cb?: any): any

			function restart(cmd?: any, opts?: any, cb?: any): void

			function resurrect(cb?: any): any

			function scale(app_name?: any, number?: any, cb?: any): any

			function sendDataToProcessId(proc_id?: any, packet?: any, cb?: any): any

			function sendLineToStdin(pm_id?: any, line?: any, separator?: any, cb?: any): any

			function sendSignalToProcessId(signal?: any, process_id?: any, cb?: any): any

			function sendSignalToProcessName(signal?: any, process_name?: any, cb?: any): any

			function serve(target_path?: any, port?: any, opts?: any, cb?: any): any

			function set(key?: any, value?: any, cb?: any): any

			function snapshotPM2(cb?: any, ...args?: any[]): any

			function speedList(code?: any): any

			function start(cmd?: any, opts?: any, cb?: any): void

			function startup(platform?: any, opts?: any, cb?: any): any

			function stop(process_name?: any, cb?: any): void

			function streamLogs(id?: any, lines?: any, raw?: any, timestamp?: any, exclusive?: any): any

			function trigger(pm_id?: any, action_name?: any, params?: any, cb?: any): any

			function uninstall(module_name?: any, cb?: any): any

			function uninstallStartup(platform?: any, opts?: any, cb?: any): any

			function unlink(cb?: any): void

			function unset(key?: any, cb?: any): any

			function update(cb?: any, ...args?: any[]): any

			function web(port?: any, cb?: any): any

			namespace actionFromJson { }

			namespace attach { }

			namespace backward { }

			namespace close { }

			namespace conf { }

			namespace connect { }

			namespace dashboard { }

			namespace deepUpdate { }

			namespace deleteModule { }

			namespace deploy { }

			namespace describe { }

			namespace destroy { }

			namespace disconnect { }

			namespace dockerMode { }

			namespace dump { }

			namespace exitCli { }

			namespace flush { }

			namespace forward { }

			namespace generateDockerfile { }

			namespace generateModuleSample { }

			namespace generateSample { }

			namespace get { }

			namespace getProcessIdByName { }

			namespace getVersion { }

			namespace gracefulReload { }

			namespace install { }

			namespace interact { }

			namespace interactInfos { }

			namespace jlist { }

			namespace kill { }

			namespace killAllModules { }

			namespace killDaemon { }

			namespace killInteract { }

			namespace launchBus { }

			namespace launchModules { }

			namespace link { }

			namespace list { }

			namespace loginToKM { }

			namespace logrotate { }

			namespace monit { }

			namespace monitorState { }

			namespace msgProcess { }

			namespace multiset { }

			namespace openDashboard { }

			namespace ping { }

			namespace printLogs { }

			namespace profilePM2 { }

			namespace publish { }

			namespace pullAndGracefulReload { }

			namespace pullAndReload { }

			namespace pullAndRestart { }

			namespace pullCommitId { }

			namespace registerToKM { }

			namespace reload { }

			namespace reloadLogs { }

			namespace remote { }

			namespace remoteV2 { }

			namespace report { }

			namespace reset { }

			namespace restart { }

			namespace resurrect { }

			namespace scale { }

			namespace sendDataToProcessId { }

			namespace sendLineToStdin { }

			namespace sendSignalToProcessId { }

			namespace sendSignalToProcessName { }

			namespace serve { }

			namespace set { }

			namespace snapshotPM2 { }

			namespace speedList { }

			namespace start { }

			namespace startup { }

			namespace stop { }

			namespace streamLogs { }

			namespace trigger { }

			namespace uninstall { }

			namespace uninstallStartup { }

			namespace unlink { }

			namespace unset { }

			namespace update { }

			namespace web { }

		}

	}

	export namespace dashboard { }

	export namespace deepUpdate { }

	export namespace deleteModule { }

	export namespace deploy { }

	export namespace describe { }

	export namespace destroy { }

	export namespace disconnect { }

	export namespace dockerMode { }

	export namespace dump { }

	export namespace exitCli { }

	export namespace flush { }

	export namespace forward { }

	export namespace generateDockerfile { }

	export namespace generateModuleSample { }

	export namespace generateSample { }

	export namespace get { }

	export namespace getProcessIdByName { }

	export namespace getVersion { }

	export namespace gracefulReload { }

	export namespace install { }

	export namespace interact { }

	export namespace interactInfos { }

	export namespace jlist { }

	export namespace kill { }

	export namespace killAllModules { }

	export namespace killDaemon { }

	export namespace killInteract { }

	export namespace launchBus { }

	export namespace launchModules { }

	export namespace link { }

	export namespace list { }

	export namespace loginToKM { }

	export namespace logrotate { }

	export namespace monit { }

	export namespace monitorState { }

	export namespace msgProcess { }

	export namespace multiset { }

	export namespace openDashboard { }

	export namespace ping { }

	export namespace printLogs { }

	export namespace profilePM2 { }

	export namespace publish { }

	export namespace pullAndGracefulReload { }

	export namespace pullAndReload { }

	export namespace pullAndRestart { }

	export namespace pullCommitId { }

	export namespace registerToKM { }

	export namespace reload { }

	export namespace reloadLogs { }

	export namespace remote { }

	export namespace remoteV2 { }

	export namespace report { }

	export namespace reset { }

	export namespace restart { }

	export namespace resurrect { }

	export namespace scale { }

	export namespace sendDataToProcessId { }

	export namespace sendLineToStdin { }

	export namespace sendSignalToProcessId { }

	export namespace sendSignalToProcessName { }

	export namespace serve { }

	export namespace set { }

	export namespace snapshotPM2 { }

	export namespace speedList { }

	export namespace start { }

	export namespace startup { }

	export namespace stop { }

	export namespace streamLogs { }

	export namespace trigger { }

	export namespace uninstall { }

	export namespace uninstallStartup { }

	export namespace unlink { }

	export namespace unset { }

	export namespace update { }

	export namespace web { }

}
