/** Declaration file generated by dts-gen */

declare module 'ml-regression' {

	export class ExponentialRegression {
		constructor(...args: any[]);

		_predict(...args: any[]): void;

		toJSON(...args: any[]): void;

		toLaTeX(...args: any[]): void;

		toString(...args: any[]): void;

		static load(...args: any[]): void;

	}

	export class KRR {
		constructor(...args: any[]);

		_predict(...args: any[]): void;

		toJSON(...args: any[]): void;

		static load(...args: any[]): void;

	}

	export class KernelRidgeRegression {
		constructor(...args: any[]);

		_predict(...args: any[]): void;

		toJSON(...args: any[]): void;

		static load(...args: any[]): void;

	}

	export class MultivariateLinearRegression {
		constructor(...args: any[]);

		_predict(...args: any[]): void;

		predict(...args: any[]): void;

		score(...args: any[]): void;

		toJSON(...args: any[]): void;

		static load(...args: any[]): void;

	}

	export class PolinomialFitting2D {
		constructor(...args: any[]);

		_predict(...args: any[]): void;

		toJSON(...args: any[]): void;

		train(...args: any[]): void;

		static load(...args: any[]): void;

	}

	export class PolynomialRegression {
		constructor(...args: any[]);

		_predict(...args: any[]): void;

		_toFormula(...args: any[]): void;

		toJSON(...args: any[]): void;

		toLaTeX(...args: any[]): void;

		toString(...args: any[]): void;

		static load(...args: any[]): void;

	}

	export class PowerRegression {
		constructor(...args: any[]);

		_predict(...args: any[]): void;

		toJSON(...args: any[]): void;

		toLaTeX(...args: any[]): void;

		toString(...args: any[]): void;

		static load(...args: any[]): void;

	}

	export class RobustPolynomialRegression {
		constructor(...args: any[]);

		_predict(...args: any[]): void;

		_toFormula(...args: any[]): void;

		toJSON(...args: any[]): void;

		toLaTeX(...args: any[]): void;

		toString(...args: any[]): void;

		static load(...args: any[]): void;

	}

	export class SLR {
		constructor(...args: any[]);

		_predict(...args: any[]): void;

		computeX(...args: any[]): void;

		toJSON(...args: any[]): void;

		toLaTeX(...args: any[]): void;

		toString(...args: any[]): void;

		static load(...args: any[]): void;

	}

	export class SimpleLinearRegression {
		constructor(...args: any[]);

		_predict(...args: any[]): void;

		computeX(...args: any[]): void;

		toJSON(...args: any[]): void;

		toLaTeX(...args: any[]): void;

		toString(...args: any[]): void;

		static load(...args: any[]): void;

	}

	export class TheilSenRegression {
		constructor(...args: any[]);

		_predict(...args: any[]): void;

		computeX(...args: any[]): void;

		toJSON(...args: any[]): void;

		toLaTeX(...args: any[]): void;

		toString(...args: any[]): void;

		static load(...args: any[]): void;

	}

}
