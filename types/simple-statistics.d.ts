/** Declaration file generated by dts-gen */

declare module 'simple-statistics' {

	export = ss

	export namespace ss {
		class BayesianClassifier {
			constructor()

			score<T = Object>(item: T): T

			train<T = Object>(item: T, category: string): void

		}

		class PerceptronModel {
			constructor()

			predict(features?: any): any

			train(features?: any, label?: any): any

		}

		class bayesian {
			constructor()

			score(item?: any): any

			train(item?: any, category?: any): void

		}

		class perceptron {
			constructor()

			predict(features?: any): any

			train(features?: any, label?: any): any

		}

		const epsilon: number

		const standardNormalTable: number[]

		function addToMean(mean?: any, n?: any, newValue?: any): any

		function average(x?: any): any

		function bernoulliDistribution(p?: any): any

		function binomialDistribution(trials?: any, probability?: any): any

		function bisect(func?: any, start?: any, end?: any, maxIterations?: any, errorTolerance?: any): any

		function chiSquaredGoodnessOfFit(data?: any, distributionType?: any, significance?: any): any

		function chunk<T>(x: Array<T>, chunkSize: number): Array<Array<T>>

		function ckmeans(x?: any, nClusters?: any): any

		function combinations(x?: any, k?: any): any

		function combinationsReplacement(x?: any, k?: any): any

		function combineMeans(mean1?: any, n1?: any, mean2?: any, n2?: any): any

		function combineVariances(variance1?: any, mean1?: any, n1?: any, variance2?: any, mean2?: any, n2?: any): any

		function cumulativeStdNormalProbability(z?: any): any

		function equalIntervalBreaks(x?: any, nClasses?: any): any

		function erf(x?: any): any

		function errorFunction(x?: any): any

		function factorial(n?: any): any

		function geometricMean(x?: any): any

		function harmonicMean(x?: any): any

		function interquartileRange(x?: any): any

		function inverseErrorFunction(x?: any): any

		function iqr(x?: any): any

		function linearRegression(data?: any): any

		function linearRegressionLine(mb?: any): any

		function mad(x?: any): any

		function max(x?: any): any

		function maxSorted(x?: any): any

		function mean(x?: any): any

		function median(x?: any): any

		function medianAbsoluteDeviation(x?: any): any

		function medianSorted(sorted?: any): any

		function min(x?: any): any

		function minSorted(x?: any): any

		function mode(x?: any): any

		function modeFast(x?: any): any

		function modeSorted(sorted?: any): any

		function permutationsHeap(elements?: any): any

		function poissonDistribution(lambda?: any): any

		function probit(p?: any): any

		function product(x?: any): any

		function quantile(x?: any, p?: any): any

		function quantileSorted(x?: any, p?: any): any

		function rSquared(x?: any, func?: any): any

		function rms(x?: any): any

		function rootMeanSquare(x?: any): any

		function sample(x?: any, n?: any, randomSource?: any): any

		function sampleCorrelation(x?: any, y?: any): any

		function sampleCovariance(x?: any, y?: any): any

		function sampleKurtosis(x?: any): any

		function sampleSkewness(x?: any): any

		function sampleStandardDeviation(x?: any): any

		function sampleVariance(x?: any): any

		function sampleWithReplacement(x?: any, n?: any, randomSource?: any): any

		function shuffle(x?: any, randomSource?: any): any

		function shuffleInPlace(x?: any, randomSource?: any): any

		function standardDeviation(x?: any): any

		function subtractFromMean(mean?: any, n?: any, value?: any): any

		function sum(x?: any): any

		function sumNthPowerDeviations(x?: any, n?: any): any

		function sumSimple(x?: any): any

		function tTest(x?: any, expectedValue?: any): any

		function tTestTwoSample(sampleX?: any, sampleY?: any, difference?: any): any

		function uniqueCountSorted(x?: any): any

		function variance(x?: any): any

		function zScore(x?: any, mean?: any, standardDeviation?: any): any

	}

}

